name: Build Quarkus Native Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
    tags:
      - '*'
jobs:
  build-native:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          github-token: ${{ secrets.GH_TOKEN }}

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: chmod
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean compile

      - name: Build native image
        run: ./mvnw package -Pnative -DskipTests

      - name: Commit native binary to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add target/*-runner
          git commit -m "Add native binary [skip ci]" || exit 0
          git push

  build-native-container:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: chmod
        run: chmod +x ./mvnw

      - name: Build native image in container
        run: ./mvnw package -Pnative -DskipTests -Dquarkus.native.container-build=true

      - name: Set repository name env
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2)" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push Docker image
        run: |
          docker build -f src/main/docker/Dockerfile.native-micro -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
        shell: bash

      - name: Build and push Docker image with version tag
        run: |
          VERSION=${LATEST_TAG#v}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:$VERSION
